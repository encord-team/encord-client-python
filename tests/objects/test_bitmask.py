import numpy as np

from encord.common.bitmask_operations.bitmask_operations import (
    _mask_to_rle,
    _rle_to_mask,
    _rle_to_string,
    _string_to_rle,
    serialise_bitmask,
    transpose_bytearray,
)
from encord.objects.bitmask import (
    BitmaskCoordinates,
)


def test_rle_decode():
    resolution = 1914 * 2294

    encoded_str = "V[^i0g1Rj1101DfgRhi1"

    r = _string_to_rle(encoded_str)
    assert sum(r) == resolution

    re_encoded_str = _rle_to_string(r)
    assert encoded_str == re_encoded_str


def test_basic_rle_to_mask():
    res = _rle_to_mask([5, 2, 5], size=12)
    assert res == b"\00\00\00\00\00\01\01\00\00\00\00\00"


def test_basic_rle_to_mask_zebra():
    res = _rle_to_mask([1, 1, 1, 1, 1, 1, 1, 1], size=8)
    assert res == b"\00\01\00\01\00\01\00\01"


def test_basic_mask_to_rle():
    mask = b"\00\00\00\00\00\01\01\00\00\00\00\00"
    rle = _mask_to_rle(mask)
    assert rle == [5, 2, 5]


def test_basic_mask_to_rle_zebra():
    mask = b"\00\01\00\01\00\01\00\01"
    rle = _mask_to_rle(mask)
    assert rle == [1, 1, 1, 1, 1, 1, 1, 1]


def test_rle_to_mask():
    resolution = 1914 * 2294
    encoded_str = "V[^i0g1Rj1101DfgRhi1"
    rle = _string_to_rle(encoded_str)
    mask = _rle_to_mask(rle, size=resolution)
    assert len(mask) == resolution


def test_mask_roundtrip():
    orig_mask = np.zeros((2000, 3000), dtype=bool)
    orig_mask[:1000, 1000:] = 1
    orig_mask[1000:, :1000] = 1

    mask_coordinates = BitmaskCoordinates(orig_mask)

    new_mask = mask_coordinates.to_numpy_array()
    assert np.allclose(orig_mask, new_mask)

    new_mask_using_constructor = np.array(mask_coordinates)
    assert np.allclose(orig_mask, new_mask_using_constructor)


def test_mask_rle_mask_roundtrip():
    orig_mask = np.zeros((2000, 3000), dtype=bool)
    orig_mask[:1000, 1000:] = 1
    orig_mask[1000:, :1000] = 1

    mask_coordinates = BitmaskCoordinates(orig_mask)
    mask_dict = mask_coordinates.to_dict()

    new_mask = BitmaskCoordinates.from_dict(mask_dict).to_numpy_array()
    assert np.allclose(orig_mask, new_mask)


def test_transpose_bytearray():
    mask = b"\00\00\00\00\00\01\01\00\00\00\00\00"
    shape = (3, 4)
    expected = b"\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00"
    ans = transpose_bytearray(mask, shape)
    assert ans == expected


def test_serialise_bitmask_starting_with_true():
    mask = np.array(
        [
            [True, True, True],
            [False, False, False],
        ]
    )
    shape = mask.shape
    rle_string = serialise_bitmask(mask.tobytes())
    mask_encoded = BitmaskCoordinates.EncodedBitmask(
        top=0, left=0, height=shape[0], width=shape[1], rle_string=rle_string
    )
    mask_decoded = BitmaskCoordinates(mask_encoded).to_numpy_array()

    assert np.array_equal(mask, mask_decoded)


def test_serialise_bitmask_empty():
    mask = np.array([[]], dtype=bool)
    shape = mask.shape

    rle_string = serialise_bitmask(mask.tobytes())
    mask_encoded = BitmaskCoordinates.EncodedBitmask(
        top=0, left=0, height=shape[0], width=shape[1], rle_string=rle_string
    )
    mask_decoded = BitmaskCoordinates(mask_encoded).to_numpy_array()

    assert np.array_equal(mask, mask_decoded)  # Mask is inverted and the test fails.
