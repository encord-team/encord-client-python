name: 'Run integration tests'
description: 'Run the integration tests for a given Python version. These tests come from the cord-backend.'

inputs:
  python-version:
    description: 'Python version to use'
    default: 3.13
    required: false
  test-report-file:
    description: 'File name to save the test report in'
    required: false
    default: integration-test-report-python3_13.xml
  private-key:
    description: 'Private key for integration tests'
    required: true
  private-key-non-org:
    description: 'Private key of the second (non-org) user for integration tests'
    required: true
  private-key-service-account:
    description: 'Private key for service account user for integration tests'
    required: true
  integration-tests-location:
    description: 'project of the backend repo.'
    default: ./encord-backend/projects/sdk-integration-tests
    required: false
  test-dir:
    description: 'Test directory of the integration tests project.'
    default: ./src/sdk_integration_tests/tests
    required: false
  environment:
    description: 'Encord deployment to run tests'
    default: DEV
    required: false
  sdk-repository-url:
    description: 'Git URL to the Encord SDK repository'
    default: https://github.com/encord-team/encord-client-python
    required: false


runs:
  using: "composite"

  steps:
    - name: Setup uv environment
      uses: ./.github/actions/setup-uv-environment
      with:
        python-version: ${{ inputs.python-version }}
        with-dev-dependencies: true

    - name: Setup FFMPEG
      uses: FedericoCarboni/setup-ffmpeg@v2

    - name: Run tests
      run: |
        cd ${{ inputs.integration-tests-location }}
        export PRIVATE_KEY="${{ inputs.private-key }}"
        export PRIVATE_KEY_SERVICE_ACCOUNT="${{ inputs.private-key-service-account }}"
        export PRIVATE_KEY_NON_ORG='${{ inputs.private-key-non-org }}'
        export CORD_ENV="${{ inputs.environment }}"
        uv sync
        uv add git+${{ inputs.sdk-repository-url }}
        source .venv/bin/activate
        pytest --timeout=600 -n 4 ${{ inputs.test-dir }} --rootdir=${{ inputs.test-dir }} --verbose --junitxml=${{ inputs.test-report-file }}
      shell: bash

    - name: Upload report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ inputs.test-report-file }}
        path: ${{ inputs.integration-tests-location }}/${{ inputs.test-report-file }}

    - name: Publish integration test report Python ${{ inputs.python-version }}
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: ${{ inputs.integration-tests-location }}/${{ inputs.test-report-file }}
        check_name: SDK integration test report
